openapi: 3.0.8
info:
  title: Description de l'API Rest de notre application web(Cook me) 
  description: API de gestion de recherche personnalisée de recettes à partir d'un profil utilisateur
  version: 1.0.0
  
servers:
  - url: http://localhost:8080/api/cookme
    description: Serveur de développement
  
tags:
  - name: users
    description: Gestion utilisateur ( Inscription, connexion, garde-manger ...)
  - name: recipes
    description: Gestion des recettes 

# Description of all the routes in our api
paths:
  /: # Default route
    get:
      summary: Page par défaut
      responses:
        default:
          description: Accès avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'


  /signup: # Route for user registration
    post:
      tags:
        - users
      summary: Création d'un compte utilisateur (inscription)
      description: Permet de créer un compte utilisateur en fournissant une adresse mail et un mot de passe 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Compte utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        default:
          description: Erreur, informations erronnées ou problème serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'


  /login: # Route for user login
    post:
      tags:
        - users
      summary: Connexion utilisateur
      description: Permet à un utilisateur de se connecter en renseignant son adresse mail et son mot de passe.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Connexion réussie et création d'un token pour l'utilisateur
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  token:
                    type: string
        default:
          description: Erreur, informations erronnées ou problème serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'


  /login/{userId}: # Route to retrieve, edit and delete user
    get:  # To find a single User with an id
      security: # Apply the security
        - BearerAuth: [] 
      tags:
        - users
      summary: Récupération d'un utilisateur
      description: Récupère les informations sur un utilisateur en particulier en fonction de son identifiant.
      parameters:
        - in: path
          name: userId
          description: L'identifiant de l'utilisateur à récupérer
          required: true
          schema:
            type: string
      responses:
        200:
          description: Récupération de l'utilisateur avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                    example: toto@example.com
                  pantry:
                    type: array
                    items:
                      type: string
                    uniqueItems: true
                    example: ["Chicken", "Avocado", "Salmon"]
        default:
          description: Utilisateur non trouvé ou problème serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'


    put:  # To edit user information
      security: # Apply the security
        - BearerAuth: []
      tags:
        - users
      summary: Mise à jour d'un utilisateur
      description: Mise à jour des informations d'un utilisateur en fournissant son identifiant.
      parameters:
        - in: path
          name: id
          description: L'ID de l'utilisateur à mettre à jour
          required: true
          schema:
            type: string
      responses:
        default:
          description: Modification avec succès/erreur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    

    delete: # To delete user
      security: # Apply the security
        - BearerAuth: []
      tags:
        - users
      summary: Suppression d'un utilisateur
      description: Suppression d'un compte utilisateur en fournissant son identifiant.
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'utilisateur
          required: true
          schema:
            type: string
      responses:
        default:
          description: Suppression avec succès/erreur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      

  /pantry/add: # Route to add an ingredient to a user's pantry
    put:
      security: # Apply the security
        - BearerAuth: []
      tags:
        - users
      summary: Ajout ingrédient 
      description: Permet d'ajouter un ingrédient dans le placard de l'utilisateur.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - pantry
              properties:
                id:
                  type: string
                pantry:
                  type: string
      responses:
        default:
          description: Ingredient ajouté avec succès ou erreur.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'   


  /pantry/remove: # To remove an ingredient to a user's pantry
    put:
      security: # Apply the security
        - BearerAuth: [ 'user' ]
      tags:
        - users
      summary: Suppression d'un ingrédient 
      description: Permet de supprimer un ingrédient dans le placard de l'utilisateur.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - pantry
              properties:
                id:
                  type: string
                pantry:
                  type: string
      responses:
        default:
          description: Suppression avec succès ou erreur.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'


  /pantry/removeall: # To remove all ingredients to a user's pantry
    put:
      security: # Apply the security
        - BearerAuth: []
      tags:
        - users
      summary: Suppression des ingrédients 
      description: Permet de supprimer tous ingrédients dans le placard de l'utilisateur.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        default:
          description: Suppression avec succès ou erreur.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'         


  /recipe: # Retrieve a recipe by his name from the external api
    get: 
      security: # Apply the security
        - BearerAuth: [] 
      tags:
        - recipes
      summary: Liste aléatoire d'ingrédients
      description: Renvoie une liste aléatoire d'ingrédients depuis l'api externe
      responses:
        200:
          description: Liste d'ingrédients trouvée avec succès 
          content:
            application/json:
              schema:
                type: array
                properties:
                  pantry:
                    type: string
        default:
          description: Erreur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /recipe/{name}: # Retrieve a recipe by his name from the external api
    get: 
      security: # Apply the security
        - BearerAuth: [] 
      tags:
        - recipes
      summary: Récupère une recette
      description: Récupère une recette donnée depuis l'api externe
      parameters:
        - in: path
          name: name
          description: L'ingrédient à récupérer
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ingrédient trouvé avec succès 
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  img:
                    type: object
                  instructions:
                    type: string
                  ingredients:
                    type: string
                  pantryIngredients:
                    type: string
        default:
          description: Ingrédient non trouvé ou problème serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'


  /ingredients/{term}: # Retrieve list of ingredients with a specific term
    get:  
      security: # Apply the security
        - BearerAuth: []
      tags:
        - recipes
      summary: Liste d'ingrédients
      description: Renvoie la liste d'ingrédients d'une recette donnée depuis l'api externe
      parameters:
        - in: path
          name: term
          description: La recette
          required: true
          schema:
            type: string
      responses:
        200:
          description: Liste d'ingrédients trouvée avec succès 
          content:
            application/json:
              schema:
                type: array
                properties:
                  element:
                    type: string
        default:
          description: Liste non trouvée ou problème serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

#  Descriptions of common components
components:
  schemas:
    User: # Schema for users
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "toto@gmail.com"
        password:
          type: string 
          format: password
          example: "toto12345"

    Message: # Schema for error response body
      type: object
      properties:
        message:
          type: string
          example: "Succès ou erreur"
      required:
        - message
        
  securitySchemes: # Schema for secure access to sensitive
    BearerAuth:   
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Acccess token is missing or invalid

# Apply the security globally to all operations
# security:
#   - BearerAuth: [] 